    def custom_exit(self, pair: str, trade: 'Trade', current_time: datetime, current_rate: float,
                    current_profit: float, **kwargs) -> Optional[str]:
        """
        Applies custom exit rules based on trade-specific and live data.

        - Rule 1: Dynamic profit target based on the entry signal strength.
        - Rule 2: Emergency exit if the signal for the trade has severely deteriorated.

        Returns:
            A string with the reason for the exit, or None to continue the trade.
        """
        # Get the dataframe for the current pair and the latest candle
        dataframe, _ = self.dp.get_analyzed_dataframe(pair, self.timeframe)
        last_candle = dataframe.iloc[-1].squeeze()

        # Safety check: Do not proceed if the dataframe is empty or invalid
        if last_candle is None:
            return None

        # --- Rule 1: Dynamic ATR Profit Target ---
        # CORRECTED: Retrieve from 'trade.open_custom_info' instead of 'trade.custom_info'
        signal_strength = trade.open_custom_info.get('signal_strength', 0.5) if trade.open_custom_info else 0.5
        atr_value = last_candle['atr']

        # Calculate a dynamic profit multiplier: stronger entry signals aim for larger profits.
        # The multiplier scales from 3.0x (for weakest signals) to 5.0x (for strongest signals).
        profit_multiplier = 3.0 + (signal_strength * 2.0)

        # Correctly calculate the profit target in terms of price offset
        if trade.is_long:
            profit_target = trade.open_rate + (atr_value * profit_multiplier)
            if current_rate > profit_target:
                return 'atr_profit_target_long'
        elif trade.is_short:
            profit_target = trade.open_rate - (atr_value * profit_multiplier)
            if current_rate < profit_target:
                return 'atr_profit_target_short'

        # --- Rule 2: Signal Deterioration Exit ---
        # This is an "emergency exit" to protect capital if the market turns against the trade.
        # This check is performed regardless of whether the trade is in profit or loss.

        # Get the *current* score for the direction of the trade
        if trade.is_long:
            current_score = last_candle.get('long_score', 0)
        else:  # trade.is_short
            current_score = last_candle.get('short_score', 0)

        # If the score has dropped below a critical threshold (e.g., 2),
        # it means the original reason for entry is no longer valid.
        if current_score < 2:
            return 'signal_deterioration_exit'

        # If neither of the above custom exit conditions were met, return None.
        return None
